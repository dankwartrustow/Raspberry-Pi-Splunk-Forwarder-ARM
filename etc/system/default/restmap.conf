#   Version 6.0
# DO NOT EDIT THIS FILE!
# Please make all changes to files in $SPLUNK_HOME/etc/system/local.
# To make changes, copy the section/stanza you want to change from $SPLUNK_HOME/etc/system/default
# into ../local and edit there.
#
# This file contains possible attribute and value pairs for creating
# new rest endpoints.
#

# /////////////////////////////////////////////////////////////////////////////
#  global settings
# /////////////////////////////////////////////////////////////////////////////

[global]

# indicates if auths are allowed via GET params
allowGetAuth=false

#The default handler (assuming that we have PYTHONPATH set)
pythonHandlerPath=$SPLUNK_HOME/bin/rest_handler.py



# /////////////////////////////////////////////////////////////////////////////
#  internal C++ handlers
# /////////////////////////////////////////////////////////////////////////////



[masterlm:masterlm]
match=/masterlm
requireAuthentication = false

[admin:admin]
match=/admin

# certificates
[admin:certificates]
match=/admin/certificates

# login
[admin:auth]
match=/auth
members = login,trustedlogin

[login:authed]
match=/auth/login
# The 'login:*' handlers don't require pre-existing authentication since
# they are what provide the authtokens in the first place
requireAuthentication = false

# /auth/trustedlogin is only used if Single Sign On is enabled (see
# the 'trustedIP' setting in server.conf)
[login:sso]
match=/auth/trustedlogin
requireAuthentication = false

# no auth.
[admin:auth-tokens]
match=/admin/auth-tokens
requireAuthentication = false

[admin:auth-tokens-alias]
match=/authentication/auth-tokens
requireAuthentication = false

# no auth.
[admin:server-info]
match=/admin/server-info
requireAuthentication = false

[admin:server-info-alias]
match=/server/info
requireAuthentication = false

[admin:streams_group]
match = /streams
members = rtsearch,search,deployment,clusterbundles,diag

[streams:rtsearch]
match=/streams/rtsearch
capability=rtsearch

[streams:search]
match=/streams/search
capability=search

# deployment server related handlers.
# this handler is for downloading service classes using the streaming method.
[streams:deployment]
match=/streams/deployment
requireAuthentication=false

[streams:clusterbundles]
match=/streams/clusterbundles
requireAuthentication=false

[streams:diag]
match=/streams/diag
requireAuthentication=true
capability = get_diag

# this handler is for getting to the deployment server rest endpoint.
[DS:deploymentServer]
match=/deployment
requireAuthentication=false

[SBA:sba]
match=/properties($|/)
capability.get=rest_properties_get
capability.post=rest_properties_set
capability.put=rest_properties_set
capability.delete=rest_properties_set

[static-asset:static-asset]
match=/static
capability=rest_properties_get

[admin:dist-handlers]
match=/search/distributed
members=distsearch-setup:config,distsearch-peer:peers,search-head-bundles:bundle-replication-files

[asyncsearch:asyncsearch]
match=/search
capability=search

[typeahead:typeahead]
match=/search/typeahead
capability=get_typeahead

[indexing-preview:indexing-preview]
match = /indexing/preview
capability = edit_monitor

[savedsearch:savedsearch]
match=/saved/searches

[scheduledviews:scheduledviews]
match=/scheduled/views


[input:simple]
match=/receivers/simple
capability = edit_tcp

[input:stream]
match=/receivers/stream
dynamic=true
capability = edit_tcp

[peerupload:bundle]
match=/receivers/bundle($|/)
path=$SPLUNK_HOME/var/run/searchpeers
untar=true

[bundle-delta:bundle-delta]
match=/receivers/bundle-delta($|/)

[broker:broker]
match=/broker
requireAuthentication=false

# /////////////////////////////////////////////////////////////////////////////
#  admin section groupings
# /////////////////////////////////////////////////////////////////////////////

[admin:deployment]
match=/deployment
members = deploymentclient:client

[admin:deployment_server_group]
match=/deployment/server
members = deploymentserver:config,serverclasses:serverclasses,applications:applications,serverclients:clients

[admin:authentication_group]
match=/authentication
members = auth-tokens,users,httpauth-tokens,users:changepassword,current-context

[admin:authorization_group]
match=/authorization
members = capabilities,roles

[admin:directory]
match = /directory

[admin:providers_group]
match=/authentication/providers
members=LDAP-auth:LDAP,Scripted-auth:Scripted,Splunk-auth:Splunk,auth-services:services

[admin:cluster_group]
match=/cluster
members = clusterconfig:config

[admin:cluster_master_group]
match=/cluster/master
members = clustermasterbuckets:buckets,clustermasterpeers:peers,clustermasterinfo:info,clustermastergeneration:generation,clustermastercontrol:control,clustermasterreplications:replications,clustermastersearchheads:searchheads, clustermasterpeerindexes:indexes, clustermasterfixup:fixup

[admin:cluster_slave_group]
match=/cluster/slave
members = clusterslavebuckets:buckets,clusterslaveinfo:info,clusterslavecontrol:control, clusterslavesearchheadcertificate:searchheadcertificate,clusterslavereplications:replications

[admin:cluster_searchhead_group]
match=/cluster/searchhead
members = clustersearchheadgeneration:generation,clustersearchheadconfig:searchheadconfig

[admin:licenser_group]
match=/licenser
members=licenses,pools,stacks,groups,slaves,localslave,licensermessages:messages

[admin:messages]
match=/messages

[admin:generators]
match=/generators/guid
members=random-guid:random
requireAuthentication=false

[admin:data_group]
match=/data
members = commandsconf:commands,indexes,user-prefs,lookup-table-files,modular-inputs,vix-providers,vix-indexes,datamodel-files:models

[admin:tcp_forwarders_group]
match = /data/outputs/tcp
members = tcpout-default:default,tcpout-group:group,tcpout-server:server,syslog

[admin:introspection_group]
match = /server/introspection
members = introspection-queues:queues,introspection-pipelines:pipelines,introspection-processors:processors

[admin:inputs_group]
match = /data/inputs
members = all,monitor,script,oneshotinput:oneshot,udp

[admin:tcp_inputs_group]
match = /data/inputs/tcp
members = raw,cooked,ssl

[admin:ui_data_group]
match = /data/ui
members = views,nav,manager,quickstart,viewstates,workflow-actions,conf-times:times,ui-prefs:prefs

[admin:props_group]
match = /data/props
members = props-extract:extractions,props-lookup:lookups,fieldaliases,sourcetype-rename,props-eval:calcfields

[admin:transforms_group]
match = /data/transforms
members = transforms-extract:extractions,transforms-lookup:lookups

[admin:saved_group]
match=/saved
members = savedsearch:searches,eventtypes,sourcetypes,ntags,fvtags

[admin:scheduled_group]
match=/scheduled
members = scheduledviews:views

[admin:alerts]
match=/alerts
members = alerts:fired_alerts

[admin:server_group]
match = /server
members = server-settings:settings,server-control:control,server-info:info,logger:logger

[admin:storage_group]
match = /storage
members = passwords

[admin_external:localapps-python]
handlertype=python
handlerfile=localapps.py
handleractions=create, edit

[admin_external:apptemplates]
handlertype=python
handlerfile=apptemplates.py
handleractions=list

[admin_external:appinstall]
handlertype=python
handlerfile=appinstall.py
handleractions=create

[admin:apps_group]
match=/apps
members=localapps:local,remote,apptemplates,appinstall

[admin:raw_config_group]
match=/configs
members=conf-inputs:inputs,conf-wmi:wmi,conf-deploymentclient:deploymentclient

[admin:fields]
match=/data/fields

# /////////////////////////////////////////////////////////////////////////////
#  eai specific handler settings
# /////////////////////////////////////////////////////////////////////////////

#
# The UI for the directory service requires that an entity have manager XML
# that defines how that entity is listed and edited.
#
# As a result, entity types that completely lack manager XML are omitted from
# the directory service. Ditto for entities that cannot be edited.
#

[eai:eventtypes]
showInDirSvc = true

[eai:savedsearch]
showInDirSvc = true

[eai:conf-times]
showInDirSvc = true

[eai:views]
showInDirSvc = true

[eai:nav]
showInDirSvc = true

# No manager XML exists for manager XML itself.
[eai:manager]
showInDirSvc = false

# No manager XML exists for quickstart XML.
[eai:quickstart]
showInDirSvc = false

# Because of the possible performance impact of large numbers of viewstates, do
# not include viewstates in the directory service by default.
[eai:viewstates]
showInDirSvc = false

[eai:commandsconf]
showInDirSvc = true
desc = commands

[eai:macros]
showInDirSvc = true

# Unique tag-field-value tuples are not editable.
[eai:tags]
showInDirSvc = false

# Tags by tag name do not support ACL read or write. The UI looks bad when some
# entities support sharing and permissions while others do not.
[eai:ntags]
showInDirSvc = false

[eai:fvtags]
showInDirSvc = true

[eai:transforms-extract]
showInDirSvc = true

[eai:transforms-lookup]
showInDirSvc = true

[eai:workflow-actions]
showInDirSvc = true

# The manager XML for lookup table files does not define an edit screen.
[eai:lookup-table-files]
showInDirSvc = false

[eai:props-extract]
showInDirSvc = true

[eai:props-lookup]
showInDirSvc = true

[eai:fieldaliases]
showInDirSvc = true

[eai:sourcetype-rename]
showInDirSvc = true



# /////////////////////////////////////////////////////////////////////////////
#  script-based handlers
# /////////////////////////////////////////////////////////////////////////////

[script:RemoteAppsHandlerList]
match=/apps/remote/?$
scripttype=python
handler=appsmanager.RemoteAppsHandlerList
capability.get=rest_apps_view
output_modes = xml,json

[script:RemoteAppsLogin]
match=/apps/remote/login/?
scripttype=python
handler=appsmanager.RemoteAppsLogin
capability.post=rest_apps_view
output_modes = xml,json

[script:RemoteAppsManagerEntries]
match=/apps/remote/entries(byid)?/?
scripttype=python
handler=appsmanager.RemoteAppsManager
capability.get=rest_apps_view
capability.post=rest_apps_management
capability.delete=rest_apps_management
output_modes = xml

[script:RemoteAppsManagerCategories]
match=/apps/remote/categories/?
scripttype=python
handler=appsmanager.RemoteAppsManager
capability.get=rest_apps_view
capability.post=rest_apps_management
capability.delete=rest_apps_management
output_modes = xml

[script:pdfgenHandlerIsAvailable]
match = /pdfgen/is_available
scripttype = python
handler = pdfgen_endpoint_is_available.PDFGenHandlerIsAvailable
requireAuthentication = true

[script:pdfgenHandler]
match = /pdfgen/render
scripttype = python
handler = pdfgen_endpoint.PDFGenHandler
requireAuthentication = true

# Used for test suite.  
# TODO: May need to remove before shipping
[test:test]
match=/test

# /////////////////////////////////////////////////////////////////////////////
# DataModel Handlers
# /////////////////////////////////////////////////////////////////////////////

[admin_external:datamodeleai]
handlertype = python
handlerfile = DataModelEAIHandler.py
handleractions = create, edit, list, remove, report, desc

[admin_external:datamodelacceleration]
handlertype = python
handlerfile = DataModelAccelerationHandler.py
handleractions = list

[admin_external:datamodelreport]
handlertype = python
handlerfile = DataModelReportHandler.py
handleractions = list

[admin:datamodelalias]
match=/datamodel
members=datamodeleai:model,datamodelreport:pivot,datamodelacceleration:acceleration


# /////////////////////////////////////////////////////////////////////////////
# EAI validation rules
# /////////////////////////////////////////////////////////////////////////////

[validation:savedsearch]
action.email.sendresults = validate( is_bool('action.email.sendresults'), "Value of argument 'action.email.sendresults' must be a boolean")
action.email.sendpdf     = validate( is_bool('action.email.sendpdf'),     "Value of argument 'action.email.sendpdf' must be a boolean")
action.email.inline      = validate( is_bool('action.email.inline'),      "Value of argument 'action.email.inline' must be a boolean")
action.email.to          = validate( match('action.email.to',  "(?i)^(?:[^@\s]+@(?:[^@\s.]+\.)+[a-z]{2,})(?:\s*[,;]\s*(?:[^@\s]+@(?:[^@\s]+\.)+[a-z]{2,}))*$"), "One of the email addresses in 'action.email.to' is invalid")
alert.digest_mode        = validate( is_bool('alert.digest_mode'),       "Value of argument 'alert.digest_mode' must be a boolean")
alert.severity           = 'alert.severity'>0 AND 'alert.severity'<7
alert.suppress           = validate( is_bool('alert.suppress'),          "Value of argument 'alert.suppress' must be a boolean")
alert.suppress.period    = validate ( match('alert.suppress.period',  "(?i)^((ack)|(\d+[hmsd]?))$"), "Value of argument alert.suppress.period must be of the format <integer>[smhd]? or ack")
alert.expires            = validate ( match('alert.expires',          "^\d+[hmsd]?$"), "Value of argument alert.expires must be of the format <integer>[smhd]?")
auto_summarize.timespan  = validate ( match('auto_summarize.timespan',"^\d+((s|(sec(onds?)?))|(m|min(utes?)?)|(h|h(rs?)|hours?)|(d(ays?)?)|(mon(ths?)?)|([umcd]s))?$"), "Invalid span length syntax used for argument auto_summarize.timespan")

# keep this rule in agreement with runshellscript.py internal validation, as scripts can be invoked directly from a search string
action.script.filename   = validate( NOT match('action.script.filename', "\.\.|/|\\\\"), "Script filename cannot contain '..', '/', or '\\'")

dispatch.indexedRealtime = validate( is_bool('dispatch.indexedRealtime'),      "Value of argument 'dispatch.indexedRealtime' must be a boolean")

# UI Display Options
display.general.enablePreview                                   = validate( match('display.general.enablePreview', "^(0|1)$"), "Value of argument 'display.general.enablePreview' must be either '0' or '1'")
display.general.type                                            = validate( match('display.general.type', "^(events|statistics|visualizations)$"), "Value of argument 'display.general.type' must be either 'events', 'statistics', or 'visualizations'")
display.general.timeRangePicker.show                            = validate( match('display.general.timeRangePicker.show', "^(0|1)$"), "Value of argument 'display.general.timeRangePicker.show' must be either '0' or '1'")
display.general.migratedFromViewState                           = validate( match('display.general.migratedFromViewState', "^(0|1)$"), "Value of argument 'display.general.migratedFromViewState' must be either '0' or '1'")
                   
display.events.type                                             = validate( match('display.events.type', "^(raw|list|table)$"), "Value of argument 'display.events.type' must be either 'raw', 'list', or 'table'")
display.events.rowNumbers                                       = validate( match('display.events.rowNumbers', "^(0|1)$"), "Value of argument 'display.events.rowNumbers' must be either '0' or '1'")
display.events.maxLines                                         = validate( isint('display.events.maxLines'), "Value of argument 'display.events.maxLines' must be an integer")
display.events.raw.drilldown                                    = validate( match('display.events.raw.drilldown', "^(inner|outer|full|none)$"), "Value of argument 'display.events.raw.drilldown' must be either 'inner', 'outer', 'full', or 'none'")
display.events.list.drilldown                                   = validate( match('display.events.list.drilldown', "^(inner|outer|full|none)$"), "Value of argument 'display.events.list.drilldown' must be either 'inner', 'outer', 'full', or 'none'")
display.events.list.wrap                                        = validate( match('display.events.list.wrap', "^(0|1)$"), "Value of argument 'display.events.list.wrap' must be either '0' or '1'")
display.events.table.drilldown                                  = validate( match('display.events.table.drilldown', "^(0|1)$"), "Value of argument 'display.events.table.drilldown' must be either '0' or '1'")
display.events.table.wrap                                       = validate( match('display.events.table.wrap', "^(0|1)$"), "Value of argument 'display.events.table.wrap' must be either '0' or '1'")

display.statistics.rowNumbers                                   = validate( match('display.statistics.rowNumbers', "^(0|1)$"), "Value of argument 'display.statistics.rowNumbers' must be either '0' or '1'")
display.statistics.wrap                                         = validate( match('display.statistics.wrap', "^(0|1)$"), "Value of argument 'display.statistics.wrap' must be either '0' or '1'")
display.statistics.overlay                                      = validate( match('display.statistics.overlay', "^(none|heatmap|highlow)$"), "Value of argument 'display.statistics.overlay' must be either 'none', 'heatmap', or 'highlow'")
display.statistics.drilldown                                    = validate( match('display.statistics.drilldown', "^(row|cell|none)$"), "Value of argument 'display.statistics.drilldown' must be either 'row', 'cell', or 'none'")

display.visualizations.show                                     = validate( match('display.visualizations.show', "^(0|1)$"), "Value of argument 'display.visualizations.show' must be either '0' or '1'")
display.visualizations.type                                     = validate( match('display.visualizations.type', "^(charting|singlevalue)$"), "Value of argument 'display.visualizations.type' must be either 'charting' or 'singlevalue'")
display.visualizations.chartHeight                              = validate( isint('display.visualizations.chartHeight'), "Value of argument 'display.visualizations.chartHeight' must be an integer")
display.visualizations.charting.chart                           = validate( match('display.visualizations.charting.chart', "^(line|area|column|bar|pie|scatter|radialGauge|fillerGauge|markerGauge)$"), "Value of argument 'display.visualizations.charting.chart' must be either 'line', 'area', 'column', 'bar', 'pie', 'scatter', 'radialGauge', 'fillerGauge', or 'markerGauge'")
display.visualizations.charting.chart.stackMode                 = validate( match('display.visualizations.charting.chart.stackMode', "^(default|stacked|stacked100)$"), "Value of argument 'display.visualizations.charting.chart.stackMode' must be either 'default', 'stacked', or 'stacked100'")
display.visualizations.charting.chart.nullValueMode             = validate( match('display.visualizations.charting.chart.nullValueMode', "^(gaps|zero|connect)$"), "Value of argument 'display.visualizations.charting.chart.nullValueMode' must be either 'gaps', 'zero', or 'connect'")
display.visualizations.charting.drilldown                       = validate( match('display.visualizations.charting.drilldown', "^(all|none)$"), "Value of argument 'display.visualizations.charting.drilldown' must be either 'all' or 'none'")
display.visualizations.charting.chart.style                     = validate( match('display.visualizations.charting.chart.style', "^(minimal|shiny)$"), "Value of argument 'display.visualizations.charting.chart.style' must be either 'minimal' or 'shiny'")
display.visualizations.charting.layout.splitSeries              = validate( match('display.visualizations.charting.layout.splitSeries', "^(0|1)$"), "Value of argument 'display.visualizations.charting.layout.splitSeries' must be either '0' or '1'")
display.visualizations.charting.legend.placement                = validate( match('display.visualizations.charting.legend.placement', "^(right|bottom|top|left|none)$"), "Value of argument 'display.visualizations.charting.legend.placement' must be either 'right', 'bottom', 'top', 'left', or 'none'")
display.visualizations.charting.legend.labelStyle.overflowMode  = validate( match('display.visualizations.charting.legend.labelStyle.overflowMode', "^(ellipsisEnd|ellipsisMiddle|ellipsisStart)$"), "Value of argument 'display.visualizations.charting.legend.labelStyle.overflowMode' must be either 'ellipsisEnd', 'ellipsisMiddle', or 'ellipsisStart'")
display.visualizations.charting.axisTitleX.text                 = validate( typeof('display.visualizations.charting.axisTitleX.text') == "String", "Value of argument 'display.visualizations.charting.axisTitleX.text' must be a string")
display.visualizations.charting.axisTitleY.text                 = validate( typeof('display.visualizations.charting.axisTitleY.text') == "String", "Value of argument 'display.visualizations.charting.axisTitleY.text' must be a string")
display.visualizations.charting.axisTitleX.visibility           = validate( match('display.visualizations.charting.axisTitleX.visibility', "^(visible|collapsed)$"), "Value of argument 'display.visualizations.charting.axisTitleX.visibility' must be either 'visible' or 'collapsed'")
display.visualizations.charting.axisTitleY.visibility           = validate( match('display.visualizations.charting.axisTitleY.visibility', "^(visible|collapsed)$"), "Value of argument 'display.visualizations.charting.axisTitleY.visibility' must be either 'visible' or 'collapsed'")
display.visualizations.charting.axisX.scale                     = validate( match('display.visualizations.charting.axisX.scale', "^(linear|log)$"), "Value of argument 'display.visualizations.charting.axisX.scale' must be either 'linear' or 'log'")
display.visualizations.charting.axisY.scale                     = validate( match('display.visualizations.charting.axisY.scale', "^(linear|log)$"), "Value of argument 'display.visualizations.charting.axisY.scale' must be either 'linear' or 'log'")
display.visualizations.charting.axisLabelsX.majorUnit           = validate( isnum('display.visualizations.charting.axisLabelsX.majorUnit') OR match('display.visualizations.charting.axisLabelsX.majorUnit', "^(auto)$"), "Value of argument 'display.visualizations.charting.axisLabelsX.majorUnit' must be either a number or 'auto'") 
display.visualizations.charting.axisLabelsY.majorUnit           = validate( isnum('display.visualizations.charting.axisLabelsY.majorUnit') OR match('display.visualizations.charting.axisLabelsY.majorUnit', "^(auto)$"), "Value of argument 'display.visualizations.charting.axisLabelsY.majorUnit' must be either a number or 'auto'")
display.visualizations.charting.axisX.minimumNumber             = validate( isnum('display.visualizations.charting.axisX.minimumNumber') OR match('display.visualizations.charting.axisX.minimumNumber', "^(auto)$"), "Value of argument 'display.visualizations.charting.axisX.minimumNumber' must be either a number or 'auto'")
display.visualizations.charting.axisY.minimumNumber             = validate( isnum('display.visualizations.charting.axisY.minimumNumber') OR match('display.visualizations.charting.axisY.minimumNumber', "^(auto)$"), "Value of argument 'display.visualizations.charting.axisY.minimumNumber' must be either a number or 'auto'")
display.visualizations.charting.axisX.maximumNumber             = validate( isnum('display.visualizations.charting.axisX.maximumNumber') OR match('display.visualizations.charting.axisX.maximumNumber', "^(auto)$"), "Value of argument 'display.visualizations.charting.axisX.maximumNumber' must be either a number or 'auto'")
display.visualizations.charting.axisY.maximumNumber             = validate( isnum('display.visualizations.charting.axisY.maximumNumber') OR match('display.visualizations.charting.axisY.maximumNumber', "^(auto)$"), "Value of argument 'display.visualizations.charting.axisY.maximumNumber' must be either a number or 'auto'")
display.visualizations.charting.chart.sliceCollapsingThreshold  = validate( isnum('display.visualizations.charting.chart.sliceCollapsingThreshold'), "Value of argument 'display.visualizations.charting.chart.sliceCollapsingThreshold' must be a number")
display.visualizations.singlevalue.beforeLabel                  = validate( typeof('display.visualizations.singlevalue.beforeLabel') == "String", "Value of argument 'display.visualizations.singlevalue.beforeLabel' must be a string")
display.visualizations.singlevalue.afterLabel                   = validate( typeof('display.visualizations.singlevalue.afterLabel') == "String", "Value of argument 'display.visualizations.singlevalue.afterLabel' must be a string")
display.visualizations.singlevalue.underLabel                   = validate( typeof('display.visualizations.singlevalue.underLabel') == "String", "Value of argument 'display.visualizations.singlevalue.underLabel' must be a string")

display.page.search.mode                                        = validate( match('display.page.search.mode', "^(fast|smart|verbose)$"), "Value of argument 'display.page.search.mode' must be either 'fast', 'smart', or 'verbose'")
display.page.search.timeline.format                             = validate( match('display.page.search.timeline.format', "^(hidden|compact|full)$"), "Value of argument 'display.page.search.timeline.format' must be either 'hidden', 'compact', or 'full'")
display.page.search.timeline.scale                              = validate( match('display.page.search.timeline.scale', "^(linear|log)$"), "Value of argument 'display.page.search.timeline.scale' must be either 'linear' or 'log'")
display.page.search.showFields                                  = validate( match('display.page.search.showFields', "^(0|1)$"), "Value of argument 'display.page.search.showFields' must be either '0' or '1'")
display.page.pivot.dataModel                                    = validate( typeof('display.page.pivot.dataModel') == "String", "Value of argument 'display.page.pivot.dataModel' must be a string")

[validation:ui-prefs]
display.prefs.autoOpenSearchAssistant                           = validate( match('display.prefs.autoOpenSearchAssistant', "^(0|1)$"), "Value of argument 'display.prefs.autoOpenSearchAssistant' must be either '0' or '1'")
display.prefs.timeline.height                                   = validate( isstr('display.prefs.timeline.height'), "Value of argument 'display.prefs.timeline.height' must be a string")
display.prefs.timeline.minimized                                = validate( match('display.prefs.timeline.minimized', "^(0|1)$"), "Value of argument 'display.prefs.timeline.minimized' must be either '0' or '1'")
display.prefs.timeline.minimalMode                              = validate( match('display.prefs.timeline.minimalMode', "^(0|1)$"), "Value of argument 'display.prefs.timeline.minimalMode' must be either '0' or '1'")
display.prefs.aclFilter                                         = validate( match('display.prefs.aclFilter', "^(none|app|owner)$"), "Value of argument 'display.prefs.aclFilter' must be either 'none', 'app', or 'owner'")
display.prefs.searchContext                                     = validate( isstr('display.prefs.searchContext'), "Value of argument 'display.prefs.searchContext' must be a string")
display.prefs.events.count                                      = validate( match('display.prefs.events.count', "^(10|20|50)$"), "Value of argument 'display.prefs.events.count' must be either '10', '20', or '50'")
display.prefs.statistics.count                                  = validate( match('display.prefs.statistics.count', "^(10|20|50|100)$"), "Value of argument 'display.prefs.statistics.count' must be either '10', '20', '50', or '100'")
display.prefs.fieldCoverage                                     = validate( match('display.prefs.fieldCoverage', "^(0|.01|.50|.90|1)$"), "Value of argument 'display.prefs.fieldCoverage' must be either '0', '.01', '.50', '.90', or '1'")
display.general.enablePreview                                   = validate( match('display.general.enablePreview', "^(0|1)$"), "Value of argument 'display.general.enablePreview' must be either '0' or '1'")
display.events.fields                                           = validate( isstr('display.events.fields'), "Value of argument 'display.events.fields' must be a string")
display.events.type                                             = validate( match('display.events.type', "^(raw|list|table)$"), "Value of argument 'display.events.type' must be either 'raw', 'list', or 'table'")
display.events.rowNumbers                                       = validate( match('display.events.rowNumbers', "^(0|1)$"), "Value of argument 'display.events.rowNumbers' must be either '0' or '1'")
display.events.maxLines                                         = validate( match('display.events.maxLines', "^(0|5|10|20|50|100|200)$"), "Value of argument 'display.events.maxLines' must be either '0', '5', '10', '20', '50', '100', or '200'")
display.events.raw.drilldown                                    = validate( match('display.events.raw.drilldown', "^(inner|outer|full|none)$"), "Value of argument 'display.events.raw.drilldown' must be either 'inner', 'outer', 'full', or 'none'")
display.events.list.drilldown                                   = validate( match('display.events.list.drilldown', "^(inner|outer|full|none)$"), "Value of argument 'display.events.list.drilldown' must be either 'inner', 'outer', 'full', or 'none'")
display.events.list.wrap                                        = validate( match('display.events.list.wrap', "^(0|1)$"), "Value of argument 'display.events.list.wrap' must be either '0' or '1'")
display.events.table.drilldown                                  = validate( match('display.events.table.drilldown', "^(0|1)$"), "Value of argument 'display.events.table.drilldown' must be either '0' or '1'")
display.events.table.wrap                                       = validate( match('display.events.table.wrap', "^(0|1)$"), "Value of argument 'display.events.table.wrap' must be either '0' or '1'")
display.statistics.rowNumbers                                   = validate( match('display.statistics.rowNumbers', "^(0|1)$"), "Value of argument 'display.statistics.rowNumbers' must be either '0' or '1'")
display.statistics.wrap                                         = validate( match('display.statistics.wrap', "^(0|1)$"), "Value of argument 'display.statistics.wrap' must be either '0' or '1'")
display.statistics.drilldown                                    = validate( match('display.statistics.drilldown', "^(row|cell|none)$"), "Value of argument 'display.statistics.drilldown' must be either 'row', 'cell', or 'none'")
display.visualizations.type                                     = validate( match('display.visualizations.type', "^(charting|singlevalue)$"), "Value of argument 'display.visualizations.type' must be either 'charting' or 'singlevalue'")
display.visualizations.chartHeight                              = validate( isint('display.visualizations.chartHeight'), "Value of argument 'display.visualizations.chartHeight' must be an integer")
display.visualizations.charting.chart                           = validate( match('display.visualizations.charting.chart', "^(line|area|column|bar|pie|scatter|radialGauge|fillerGauge|markerGauge)$"), "Value of argument 'display.visualizations.charting.chart' must be either 'line', 'area', 'column', 'bar', 'pie', 'scatter', 'radialGauge', 'fillerGauge', or 'markerGauge'")
display.visualizations.charting.chart.style                     = validate( match('display.visualizations.charting.chart.style', "^(minimal|shiny)$"), "Value of argument 'display.visualizations.charting.chart.style' must be either 'minimal' or 'shiny'")
display.visualizations.charting.legend.labelStyle.overflowMode  = validate( match('display.visualizations.charting.legend.labelStyle.overflowMode', "^(ellipsisEnd|ellipsisMiddle|ellipsisStart)$"), "Value of argument 'display.visualizations.charting.legend.labelStyle.overflowMode' must be either 'ellipsisEnd', 'ellipsisMiddle', or 'ellipsisStart'")
display.page.search.mode                                        = validate( match('display.page.search.mode', "^(fast|smart|verbose)$"), "Value of argument 'display.page.search.mode' must be either 'fast', 'smart', or 'verbose'")
display.page.search.timeline.format                             = validate( match('display.page.search.timeline.format', "^(hidden|compact|full)$"), "Value of argument 'display.page.search.timeline.format' must be either 'hidden', 'compact', or 'full'")
display.page.search.timeline.scale                              = validate( match('display.page.search.timeline.scale', "^(linear|log)$"), "Value of argument 'display.page.search.timeline.scale' must be either 'linear' or 'log'")
display.page.search.showFields                                  = validate( match('display.page.search.showFields', "^(0|1)$"), "Value of argument 'display.page.search.showFields' must be either '0' or '1'")


[validation:scheduledviews]
action.email.to          = validate( match('action.email.to',  "(?i)^(?:[^@\s]+@(?:[^@\s.]+\.)+[a-z]{2,})(?:\s*[,;]\s*(?:[^@\s]+@(?:[^@\s]+\.)+[a-z]{2,}))*$"), "One of the email addresses in 'action.email.to' is invalid")

[validation:conf-alert_actions]
reportServerURL         = validate( match('reportServerURL' , "(?i)(^\\s*$)|(^https?://.*/services/pdfserver/renderpdf\s*$)|(https?://[^/]+/?\s*$)"), "Invalid Remote PDF Report Server URL")
reportPaperSize         = match('reportPaperSize', "(?i)letter|legal|ledger|a2|a3|a4|a5")
reportPaperOrientation  = match('reportPaperOrientation', "(?i)portrait|landscape")
reportServerEnabled     = validate( is_bool('reportServerEnabled'), "Value of argument 'reportServerEnabled' must be a boolean")
mailserver              = validate( match('mailserver', "^(?:([ ]*)?)([a-zA-Z]|[a-zA-Z0-9][a-zA-Z0-9_\\-.]*[a-zA-Z0-9]|[0-9a-fA-F:]*:[0-9a-fA-F:]*:[0-9a-fA-F:]*|\\[[0-9a-fA-F:]*:[0-9a-fA-F:]*:[0-9a-fA-F:]*\\])(:[1-9][0-9]*)?(?:([ ]*)?)$"), "Invalid Mail host")
hostname                = validate( match('hostname', "^(?:((https|http)(\:\/\/))?)([a-zA-Z]|[a-zA-Z0-9][a-zA-Z0-9_\\-.]*[a-zA-Z0-9]|[0-9a-fA-F:]*:[0-9a-fA-F:]*:[0-9a-fA-F:]*|\\[[0-9a-fA-F:]*:[0-9a-fA-F:]*:[0-9a-fA-F:]*\\])(:[1-9][0-9]*)?$"), "Invalid Link hostname")


[validation:distsearch-setup]
shareBundles       = is_bool('shareBundles')
serverTimeout      = isint('serverTimeout')      AND 'serverTimeout'>=0
statusTimeout      = isint('statusTimeout')      AND 'statusTimeout'>=0 
connectionTimeout  = isint('connectionTimeout')  AND 'connectionTimeout'>=0 
sendTimeout        = isint('sendTimeout')        AND 'sendTimeout'>=0 
receiveTimeout     = isint('receiveTimeout')     AND 'receiveTimeout'>=0
checkTimedOutServersFrequency = isint('checkTimedOutServersFrequency') AND 'checkTimedOutServersFrequency'>=0
